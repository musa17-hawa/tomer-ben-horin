body {
  font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    sans-serif;
  background-color: #f9fafb;
  margin: 0;
  padding: 0;
  color: #111827;
}

.profile-container {
  display: flex;
  justify-content: center;
  padding: 2.5rem 1rem;
  min-height: 100vh;
  box-sizing: border-box;
}

.profile-form {
  display: flex;
  flex-direction: column;
  gap: 2.5rem;
  background: white;
  padding: 2.5rem;
  border-radius: 1rem;
  box-shadow: 0 4px 25px rgba(0, 0, 0, 0.05);
  width: 100%;
  max-width: 1000px;
  box-sizing: border-box;
}

@media (min-width: 768px) {
  .profile-form {
    flex-direction: row;
  }
}

.profile-picture-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding-bottom: 1.5rem;
}

@media (min-width: 768px) {
  .profile-picture-section {
    flex: 1;
    border-right: 1px solid #e5e7eb;
    padding-right: 2.5rem;
    padding-bottom: 0;
  }
}

.profile-picture-section h3 {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: #111827;
}

.profile-picture {
  width: 100%;
  height: 50%;
  border-radius: 5px;
  object-fit: cover;
  background-color: #f3f4f6;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  margin-bottom: 1.5rem;
  border: 3px solid #ffffff;
  transition: transform 0.2s ease;
}

.profile-picture:hover {
  transform: scale(1.02);
}

.upload-label {
  font-size: 0.75rem;
  color: #6b7280;
  margin-bottom: 1rem;
  text-align: center;
}

.upload-button {
  display: inline-block;
  background-color: #4f46e5;
  color: white;
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: 0.875rem;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.2s;
  font-weight: 500;
  text-align: center;
}

.upload-button:hover {
  background-color: #4338ca;
  transform: translateY(-1px);
}

.profile-details-section {
  flex: 2;
}

.profile-details-section h2 {
  font-size: 1.5rem;
  margin-bottom: 1.5rem;
  color: #43202b;
  font-weight: 600;
  position: relative;
  padding-bottom: 0.75rem;
}

.profile-details-section h2::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  height: 1px;
  width: 100%;
  background-color: #080707;
  border-radius: 2px;
}

.profile-details-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1.25rem;
}

@media (min-width: 640px) {
  .profile-details-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

.profile-details-grid label {
  display: flex;
  flex-direction: column;
  font-size: 0.875rem;
  color: #4b5563;
  font-weight: 500;
}

.profile-field {
  margin-bottom: 1rem;
}

.profile-field-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #374151;
}

.required-marker {
  color: #ef4444;
  margin-left: 0.25rem;
}

.profile-details-grid input,
.profile-details-grid textarea {
  margin-top: 0.5rem;
  padding: 0.75rem 1rem;
  font-size: 0.95rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  background-color: #ffffff;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.profile-details-grid input:focus,
.profile-details-grid textarea:focus {
  border-color: #4f46e5;
  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
  outline: none;
}

.profile-details-grid textarea {
  resize: none;
  height: 70px;
  overflow: auto;
  /* padding: 1rem 1rem; */
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  /* margin-top: 1rem; */
  font-size: 0.95rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  background-color: #ffffff;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.actions {
  margin-top: 2rem;
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.save-button {
  background-color: #4f46e5;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  font-size: 0.95rem;
  cursor: pointer;
  transition: all 0.2s ease;
  font-weight: 500;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 250px;
}

.save-button:hover {
  background-color: #4338ca;
  transform: translateY(-1px);
}

.logout-button {
  background-color: transparent;
  color: #6b7280;
  border: 1px solid #d1d5db;
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  font-size: 0.95rem;
  cursor: pointer;
  transition: all 0.2s ease;
  font-weight: 500;
}

.logout-button:hover {
  background-color: #f3f4f6;
  border-color: #9ca3af;
  color: #4b5563;
}

.status-message {
  margin-top: 1.25rem;
  padding: 0.75rem;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  animation: fadeIn 0.3s ease-in;
}

.status-success {
  background-color: #ecfdf5;
  color: #065f46;
  border-left: 4px solid #10b981;
}

.status-error {
  background-color: #fef2f2;
  color: #991b1b;
  border-left: 4px solid #ef4444;
}

.status-info {
  background-color: #eff6ff;
  color: #1e40af;
  border-left: 4px solid #3b82f6;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 60vh;
  font-size: 1rem;
  color: #6b7280;
}

.loading::after {
  content: "";
  width: 1.5rem;
  height: 1.5rem;
  border: 2px solid #e5e7eb;
  border-radius: 50%;
  border-top-color: #4f46e5;
  margin-left: 0.75rem;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.required {
  color: red;
  margin-left: 0.25rem;
}

.profile-label {
  display: flex;
  flex-direction: column;
  font-size: 0.875rem;
  color: #4b5563;
  font-weight: 500;
}

.label-text {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  margin-bottom: 0.5rem;
  font-size: 1rem;
}

.field-error {
  color: red;
  font-size: 0.9em;
  margin: 4px 0;
}

.field-error::before {
  content: "⚠️";
  margin-right: 0.25rem;
}/*
// import { useState, useEffect } from "react";
// import { useNavigate } from "react-router-dom";
// import { auth, db, storage } from "../../firebase";
// import { doc, updateDoc, onSnapshot } from "firebase/firestore";
// import { onAuthStateChanged, signOut } from "firebase/auth";
// import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
// import jsPDF from "jspdf";
// import html2canvas from "html2canvas";
// import { useRef } from "react";

// import "./Profile.css";

// const Profile = () => {
//   const [profile, setProfile] = useState(null);
//   const [loading, setLoading] = useState(true);
//   const [message, setMessage] = useState("");
//   const [errors, setErrors] = useState({});
//   const [imageFile, setImageFile] = useState(null);
//   const [previewImage, setPreviewImage] = useState(null);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const unsubscribeAuth = onAuthStateChanged(auth, (user) => {
//       if (user) {
//         const docRef = doc(db, "users", user.uid);
//         const unsubscribeDoc = onSnapshot(docRef, (docSnap) => {
//           if (docSnap.exists()) {
//             setProfile(docSnap.data());
//             setMessage("");
//           } else {
//             setProfile(null);
//             setMessage("No profile found.");
//           }
//           setLoading(false);
//         });
//         return () => unsubscribeDoc();
//       } else {
//         setProfile(null);
//         setMessage("Not logged in.");
//         setLoading(false);
//       }
//     });

//     return () => unsubscribeAuth();
//   }, []);

//   const handleChange = (e) => {
//     setProfile({ ...profile, [e.target.name]: e.target.value });
//   };

//   const handleFileChange = (e) => {
//     const file = e.target.files[0];
//     if (file) {
//       setImageFile(file);
//       setPreviewImage(URL.createObjectURL(file));
//     }
//   };

//   const handleImageUpload = async () => {
//     if (!imageFile) return profile?.image || "";
//     try {
//       const imageRef = ref(storage, `profile_images/${auth.currentUser.uid}`);
//       await uploadBytes(imageRef, imageFile);
//       const downloadURL = await getDownloadURL(imageRef);
//       return downloadURL;
//     } catch (error) {
//       console.error("Image upload failed:", error);
//       setMessage("Failed to upload image.");
//       return profile?.image || "";
//     }
//   };

//   const handleSave = async () => {
//     if (!profile) return;

//     const { name, bio, subject, group, email, place } = profile;
//     const newErrors = {};

//     if (!name) newErrors.name = "שדה חובה";
//     if (!bio) newErrors.bio = "שדה חובה";
//     if (!subject) newErrors.subject = "שדה חובה";
//     if (!email) newErrors.email = "שדה חובה";
//     if (!place) newErrors.place = "שדה חובה";

//     const stringFields = { name, bio, subject, email, place };
//     for (const [key, value] of Object.entries(stringFields)) {
//       if (/^\d+$/.test(value)) {
//         newErrors[key] = "אסור להזין מספר בלבד";
//       }
//     }

//     if (Object.keys(newErrors).length > 0) {
//       setErrors(newErrors);
//       setMessage("");
//       return;
//     }

//     setErrors({});
//     try {
//       const imageUrl = await handleImageUpload();
//       const updatedProfile = { ...profile, image: imageUrl };
//       const docRef = doc(db, "users", auth.currentUser.uid);
//       await updateDoc(docRef, updatedProfile);
//       setMessage("Profile updated successfully.");
//     } catch (err) {
//       console.error(err);
//       setMessage("Failed to update profile.");
//     }
//   };

//   const handleLogout = async () => {
//     try {
//       await signOut(auth);
//       navigate("/");
//     } catch (error) {
//       setMessage("Error logging out.");
//     }
//   };

//   if (loading) return <p>Loading...</p>;
//   if (!profile) return <p>{message}</p>;

//   return (
//     <div className="profile-container">
//       <form className="profile-form">
//         <div className="profile-picture-section">
//           <h3>Profile Picture</h3>
//           <img
//             src={
//               previewImage || profile.image || "https://via.placeholder.com/140"
//             }
//             alt="Profile"
//             className="profile-picture"
//           />
//           <p className="upload-label">JPG or PNG no larger than 5 MB</p>
//           <input
//             type="file"
//             accept="image/*"
//             onChange={handleFileChange}
//             style={{ display: "none" }}
//             id="fileUpload"
//           />
//           <label htmlFor="fileUpload" className="upload-button">
//             העלאת תמונה
//           </label>
//         </div>

//         <div className="profile-details-section">
//           <h2>{profile.name}</h2>
//           <div className="profile-details-grid">
//             <label htmlFor="name" className="profile-label">
//               <span className="label-text">
//                 שם<span className="required-marker">*</span>
//               </span>
//               {errors.name && <p className="field-error">{errors.name}</p>}
//               <input
//                 id="name"
//                 name="name"
//                 value={profile.name || ""}
//                 onChange={handleChange}
//               />
//             </label>

//             <label htmlFor="bio" className="profile-label">
//               <span className="label-text">
//                 bio / ביו<span className="required-marker">*</span>
//               </span>
//               {errors.bio && <p className="field-error">{errors.bio}</p>}
//               <textarea
//                 id="bio"
//                 name="bio"
//                 value={profile.bio || ""}
//                 onChange={handleChange}
//               />
//             </label>

//             <label htmlFor="subject" className="profile-label">
//               <span className="label-text">
//                 תחום האומנות<span className="required-marker">*</span>
//               </span>
//               {errors.subject && (
//                 <p className="field-error">{errors.subject}</p>
//               )}
//               <input
//                 id="subject"
//                 name="subject"
//                 value={profile.subject || ""}
//                 onChange={handleChange}
//               />
//             </label>

//             <label htmlFor="group" className="profile-label">
//               <span className="label-text">קבוצת אמנים</span>
//               {errors.group && <p className="field-error">{errors.group}</p>}
//               <input
//                 id="group"
//                 name="group"
//                 value={profile.group || ""}
//                 onChange={handleChange}
//               />
//             </label>

//             <label htmlFor="email" className="profile-label">
//               <span className="label-text">
//                 Email / אימייל<span className="required-marker">*</span>
//               </span>
//               {errors.email && <p className="field-error">{errors.email}</p>}
//               <input
//                 id="email"
//                 name="email"
//                 value={profile.email || ""}
//                 onChange={handleChange}
//               />
//             </label>

//             <label htmlFor="place" className="profile-label">
//               <span className="label-text">
//                 אזור מגורים<span className="required-marker">*</span>
//               </span>
//               {errors.place && <p className="field-error">{errors.place}</p>}
//               <input
//                 id="place"
//                 name="place"
//                 value={profile.place || ""}
//                 onChange={handleChange}
//               />
//             </label>
//           </div>

//           <div className="actions">
//             <button type="button" onClick={handleSave}>
//               Save changes
//             </button>
//             <button type="button" onClick={handleLogout}>
//               Logout
//             </button>
//           </div>
//           <p>{message}</p>
//         </div>
//       </form>
//     </div>
//   );
// };

// export default Profile;
